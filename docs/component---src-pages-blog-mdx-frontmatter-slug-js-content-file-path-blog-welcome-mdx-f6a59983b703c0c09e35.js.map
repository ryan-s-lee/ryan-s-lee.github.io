{"version":3,"file":"component---src-pages-blog-mdx-frontmatter-slug-js-content-file-path-blog-welcome-mdx-f6a59983b703c0c09e35.js","mappings":"0NAiCO,MAAMA,EAAa,gBAAoB,CAAC,GAiCxC,SAASC,EAAiBC,GAC/B,MAAMC,EAAoB,aAAiBH,GAG3C,OAAO,WAAc,IAEO,mBAAfE,EACFA,EAAWC,GAGb,IAAIA,KAAsBD,IAChC,CAACC,EAAmBD,GACzB,CC3EA,SAASE,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,EAAG,KACFC,IAAsBL,EAAMH,YAC/B,OAAOS,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBL,EAAYG,EAAG,KAAM,qSAAsS,KAAME,EAAAA,cAAoBL,EAAYG,EAAG,KAAM,4BACjb,CAKA,MAJA,SAAoBJ,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOO,QAASC,GAAaN,OAAOC,OAAO,CAAC,EAAGE,IAAsBL,EAAMH,YAC3E,OAAOW,EAAYF,EAAAA,cAAoBE,EAAWR,EAAOM,EAAAA,cAAoBP,EAAmBC,IAAUD,EAAkBC,EAC9H,E,mBCPA,MAAMS,EAAWC,IAAsB,IAArB,KAACC,EAAI,SAAEC,GAAS,EAChC,OAAON,EAAAA,cAAoBO,EAAAA,EAAQ,KAAMP,EAAAA,cAAoB,KAAM,KAAMK,EAAKG,IAAIC,YAAYC,OAAQV,EAAAA,cAAoB,IAAK,KAAMK,EAAKG,IAAIC,YAAYE,MAAOL,EAAS,EAY/JM,EAAO,IAAMZ,EAAAA,cAAoBa,EAAAA,EAAK,CACjDH,MAAO,cAGM,SAASI,EAAiBpB,GACvC,OAAOM,EAAAA,cAAoBG,EAAUT,EAAOM,EAAAA,cAAoBe,EAAqBrB,GACvF,C,8ECHA,MAjBe,IAEP,2BACA,sBAAIsB,UCNS,iCDOT,0BACI,gBAAC,EAAAC,KAAI,CAACC,GAAG,KAAI,SAEjB,0BACI,gBAAC,EAAAD,KAAI,CAACC,GAAG,SAAQ,WEkBjC,MAxBe,IAAiB,IAAhB,SAACZ,GAAS,EAEtB,MAAMD,GAAOc,EAAAA,EAAAA,gBAAe,cAQ5B,OACI,uBAAKH,UChBU,mCDiBf,gBAAC,EAAM,MACP,8BACI,0BAAKX,EAAKe,KAAKC,aAAaX,QAEhC,4BACKJ,GAEC,C,+CELd,IAjBY,IAAc,IAAb,MAACI,GAAM,EAChB,MAAML,GAAOc,EAAAA,EAAAA,gBAAe,cAS5B,OACI,gCACI,6BAAQT,EAAM,MAAIL,EAAKe,KAAKC,aAAaX,OAC1C,C","sources":["webpack://gatsby-starter-default/./node_modules/@mdx-js/react/lib/index.js","webpack://gatsby-starter-default/./blog/welcome.mdx","webpack://gatsby-starter-default/./src/pages/blog/{mdx.frontmatter__slug}.js","webpack://gatsby-starter-default/./src/components/navbar.js","webpack://gatsby-starter-default/./src/components/navbar.module.css","webpack://gatsby-starter-default/./src/components/layout.js","webpack://gatsby-starter-default/./src/components/layout.module.css","webpack://gatsby-starter-default/./src/components/seo.js"],"sourcesContent":["/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n","/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"Welcome to my personal site! I mainly made it to post any work I did,\\nbut I decided to add a blog section, which will probably double as a place\\nto share notes I take in class and anything new I learn. It's definitely a\\nwork in progress, and I look forward to seeing what it grows into.\"), \"\\n\", React.createElement(_components.p, null, \"See you in another post!\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/home/ryan/repos/ryan-s-lee.github.io/blog/welcome.mdx\";\nimport * as React from 'react';\nimport Layout from '../../components/layout';\nimport Seo from '../../components/seo';\nimport {graphql} from 'gatsby';\nconst BlogPost = ({data, children}) => {\n  return React.createElement(Layout, null, React.createElement(\"h2\", null, data.mdx.frontmatter.title), React.createElement(\"p\", null, data.mdx.frontmatter.date), children);\n};\nexport const query = graphql`\nquery ($id:String) {\n    mdx(id: {eq: $id}) {\n        frontmatter {\n            title\n            date(formatString: \"MMMM D, YYYY\")\n        }\n    }\n}\n`;\nexport const Head = () => React.createElement(Seo, {\n  title: \"Blog Post\"\n});\nBlogPost\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(BlogPost, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\n","import * as React from 'react'\nimport { Link } from \"gatsby\"\nimport { navlist } from \"./navbar.module.css\"\n\nconst Navbar = () => {\n    return (\n        <nav>\n        <ul className={navlist}>\n            <li>\n                <Link to='/'>Home</Link>\n            </li>\n            <li>\n                <Link to='/blog'>Blog</Link>\n            </li>\n            {/* <li>\n                <Link to='/hobbies'>Hobbies!</Link>\n            </li> */}\n        </ul>\n        </nav>\n    );\n}\nexport default Navbar;","// extracted by mini-css-extract-plugin\nexport var navlist = \"navbar-module--navlist--31e0e\";","import * as React from 'react'\nimport Navbar from \"./navbar\";\nimport { container } from './layout.module.css'\nimport \"./layout.css\"\nimport { useStaticQuery, graphql } from 'gatsby';\n\nconst Layout = ({children}) => {\n\n    const data = useStaticQuery(graphql`\n    query MyQuery {\n        site {\n            siteMetadata {\n                title\n            }\n        }\n    }`)\n    return(\n        <div className={container}>\n        <Navbar/>\n        <header>\n            <h1>{data.site.siteMetadata.title}</h1>\n        </header>\n        <main>\n            {children}\n        </main>\n        </div>\n    )\n}\n\n\nexport default Layout;","// extracted by mini-css-extract-plugin\nexport var container = \"layout-module--container--78b04\";","import * as React from 'react'\nimport { useStaticQuery, graphql } from 'gatsby'\n\nconst Seo = ({title}) => {\n    const data = useStaticQuery(graphql`\n    query MyQuery {\n        site {\n            siteMetadata {\n                title\n            }\n        }\n    }\n    `)\n    return (\n        <>\n            <title>{title} | {data.site.siteMetadata.title}</title>\n        </>\n    )\n}\n\nexport default Seo;"],"names":["MDXContext","useMDXComponents","components","contextComponents","_createMdxContent","props","_components","Object","assign","p","_provideComponents","React","wrapper","MDXLayout","BlogPost","_ref","data","children","Layout","mdx","frontmatter","title","date","Head","Seo","GatsbyMDXWrapper","GATSBY_COMPILED_MDX","className","Link","to","useStaticQuery","site","siteMetadata"],"sourceRoot":""}